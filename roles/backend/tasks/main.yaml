- name: to disable existing node js
  ansible.builtin.command: dnf module disable nodejs -y

- name: to enable node js version 20
  ansible.builtin.command: dnf module enable nodejs:20 -y

- name: to install node js 
  ansible.builtin.dnf: #only works for redhat family
    name: "{{ item }}"
    state: installed
  loop:
    - nodejs
    - mysql

- name: Add the user expense
  ansible.builtin.user:
    name: expense
- name: to import role
  ansible.builtin.import_role:
    name: common
    tasks_from: app-pre-req
# - name: to create app directory
#   ansible.builtin.file:
#     path: /app
#     state: directory

# - name: download backend code
#   ansible.builtin.get_url:
#     url: https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
#     dest:  /tmp/backend.zip

# - name: Extract backend.zip  into /app
#   ansible.builtin.unarchive:
#     src: /tmp/backend.zip
#     dest: /app
#     remote_src: yes

- name: install npm dependencies
  ansible.builtin.command: npm install
  args:
    chdir: /app

- name: Copy backend service
  ansible.builtin.template:
    src: backend.service.j2
    dest: /etc/systemd/system/backend.service
    remote_src: yes

- name: install connect mysql db from ansible 
  ansible.builtin.pip:
    name:
    - PyMySQL
    - cryptography
    executable: pip3.9 # pip3.11 if python version is 3.11
- name: import data to mysql 
  community.mysql.mysql_db:
    login_user: "{{ login_user }}"
    login_password: "{{ mysql_root_password }}"
    login_host: "{{ login_host }}"
    target: /app/schema/backend.sql
    state: import
    name: all

- name: daemon reload
  ansible.builtin.systemd_service:
    daemon_reload: true

- name: start and enable backend service
  ansible.builtin.service:
    name: backend
    state: started
    enabled: yes